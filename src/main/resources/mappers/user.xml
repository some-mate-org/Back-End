<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.somemate.demo.user.dao.UserDao">

    <!-- 사용자 정보를 매핑하는 resultMap 설정 -->
    <resultMap id="UserResultMap" type="User">
        <result property="name" column="name" jdbcType="NVARCHAR" javaType="String"/>
        <result property="mbti" column="mbti" jdbcType="NVARCHAR" javaType="String"/>
        <result property="age" column="age" jdbcType="INTEGER" javaType="int"/>
        <result property="gender" column="gender" jdbcType="INTEGER" javaType="int"/>
        <result property="profile" column="profile" jdbcType="NVARCHAR" javaType="String"/>
        <result property="userId" column="user_id" jdbcType="NVARCHAR" javaType="String"/>
    </resultMap>

    <!-- 사용자 ID로 사용자 인덱스를 조회하는 쿼리 -->
    <select id="getUserIdx" parameterType="string" resultType="int">
        select idx
        from user
        where user_id = #{userId}
    </select>

    <!-- 사용자 ID로 사용자 MBTI와 인덱스를 조회하는 쿼리 -->
    <select id="getUserMbtiAndIdx" parameterType="string" resultType="map">
        select idx, mbti
        from user
        where user_id = #{userId}
    </select>

    <!-- 매칭된 사용자 정보를 조회하는 쿼리 -->
    <select id="getMatchedUserInfo" parameterType="map" resultType="org.somemate.demo.user.dto.RecommendedUser">
        select user.idx,
               user.profile,
               user.openchat_link,
               user.name,
               user.gender,
               user.age,
               user.mbti,
               mbti.desc
        from user
                 join mbti on user.mbti = mbti.my_mbti
        where user.gender != (select user.gender
                              from user
                              where user.idx = #{userIdx})
          and user.mbti in (select best_mbti.best_mbti
                            from best_mbti
                            where my_mbti = #{mbti})
          and user.idx not in
              (select user.idx from matching_history where my_idx = #{userIdx} and recommended_idx = user.idx)
        order by rand()
        limit 1;
    </select>

    <!-- user_id의 중복을 확인하는 쿼리 -->
    <select id="existsByUserId" resultType="boolean" parameterType="String">
        SELECT COUNT(1)
        FROM user
        WHERE user_id = #{userId}
    </select>

    <!-- 사용자 정보를 저장하는 INSERT 쿼리 -->
    <insert id="saveUser" parameterType="org.somemate.demo.user.dto.User">
        INSERT INTO `user` (openchat_link,
                            name,
                            user_id,
                            password,
                            mbti,
                            age,
                            gender,
                            profile,
                            refresh_token)
        VALUES (#{openchatLink},
                #{name},
                #{userId},
                #{password},
                #{mbti},
                #{age},
                #{gender},
                #{profile},
                #{refreshToken})
    </insert>

    <!-- 사용자 ID로 refreshToken을 업데이트하는 쿼리 -->
    <update id="updateRefreshToken" parameterType="map">
        UPDATE user
        SET refresh_token = #{refreshToken}
        WHERE user_id = #{userId}
    </update>

    <!-- 사용자 ID로 refreshToken을 조회하는 쿼리 -->
    <select id="getRefreshTokenByUserId" parameterType="string" resultType="string">
        SELECT refresh_token
        FROM user
        WHERE user_id = #{userId}
    </select>

    <!-- user_id로 사용자 정보를 조회하는 쿼리 -->
    <select id="findByUserId" resultMap="UserResultMap">
        SELECT idx,
               openchat_link,
               name,
               user_id,
               password,
               mbti,
               age,
               gender,
               profile,
               refresh_token
        FROM user
        WHERE user_id = #{userId}
    </select>

    <!-- user_id로 사용자를 조회하는 쿼리 -->
    <select id="findUserByUserId" resultMap="UserResultMap" useCache="false">
        SELECT name,
               mbti,
               age,
               gender,
               profile,
               user_id
        FROM user
        WHERE user_id = #{userId}
    </select>

</mapper>
